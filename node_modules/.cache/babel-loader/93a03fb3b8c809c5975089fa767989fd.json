{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jtkuhn3\\\\Documents\\\\Frontend\\\\React\\\\blind-access-webvr\\\\src\\\\components\\\\OmnitonePlayer\\\\OmnitonePlayer.js\";\nimport React from 'react';\nimport Omnitone from 'omnitone';\nimport 'aframe';\nimport { Entity, Scene } from 'aframe-react';\n\nclass OmnitonePlayer extends React.Component {\n  handleClick() {\n    console.log('clicked!'); // Set up an audio element to feed the ambisonic source audio feed.\n\n    const audioElement = document.createElement('audio');\n    audioElement.src = '../../assets/post_arthur.wav'; // Create AudioContext, MediaElementSourceNode and FOARenderer.\n\n    const audioContext = new AudioContext();\n    const audioElementSource = audioContext.createMediaElementSource(audioElement);\n    const hoaRenderer = Omnitone.createHOARenderer(audioContext); // Make connection and start play. Hook up the user input for the playback.\n\n    hoaRenderer.initialize().then(function () {\n      audioElementSource.connect(hoaRenderer.input);\n      hoaRenderer.output.connect(audioContext.destination); // This is necessary to activate audio playback out of autoplay block.\n\n      someButton.onclick = () => {\n        audioContext.resume();\n        audioElement.play();\n      };\n    });\n  }\n\n  render() {\n    return React.createElement(Entity, {\n      primitive: \"a-box\",\n      color: \"green\",\n      position: \"0 3 -5\",\n      events: {\n        click: this.handleClick\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default OmnitonePlayer;","map":{"version":3,"sources":["C:/Users/jtkuhn3/Documents/Frontend/React/blind-access-webvr/src/components/OmnitonePlayer/OmnitonePlayer.js"],"names":["React","Omnitone","Entity","Scene","OmnitonePlayer","Component","handleClick","console","log","audioElement","document","createElement","src","audioContext","AudioContext","audioElementSource","createMediaElementSource","hoaRenderer","createHOARenderer","initialize","then","connect","input","output","destination","someButton","onclick","resume","play","render","click"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAO,QAAP;AACA,SAAQC,MAAR,EAAgBC,KAAhB,QAA4B,cAA5B;;AAEA,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AAE3CC,EAAAA,WAAW,GAAI;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EADa,CAGN;;AACL,UAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAArB;AACAF,IAAAA,YAAY,CAACG,GAAb,GAAmB,8BAAnB,CALW,CAOX;;AACA,UAAMC,YAAY,GAAG,IAAIC,YAAJ,EAArB;AACA,UAAMC,kBAAkB,GAAGF,YAAY,CAACG,wBAAb,CAAsCP,YAAtC,CAA3B;AACA,UAAMQ,WAAW,GAAGhB,QAAQ,CAACiB,iBAAT,CAA2BL,YAA3B,CAApB,CAVW,CAYX;;AACAI,IAAAA,WAAW,CAACE,UAAZ,GAAyBC,IAAzB,CAA8B,YAAW;AACvCL,MAAAA,kBAAkB,CAACM,OAAnB,CAA2BJ,WAAW,CAACK,KAAvC;AACAL,MAAAA,WAAW,CAACM,MAAZ,CAAmBF,OAAnB,CAA2BR,YAAY,CAACW,WAAxC,EAFuC,CAIvC;;AACAC,MAAAA,UAAU,CAACC,OAAX,GAAqB,MAAM;AACzBb,QAAAA,YAAY,CAACc,MAAb;AACAlB,QAAAA,YAAY,CAACmB,IAAb;AACD,OAHD;AAID,KATD;AAWH;;AAEDC,EAAAA,MAAM,GAAI;AACR,WACE,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,OAAlB;AAA0B,MAAA,KAAK,EAAC,OAAhC;AAAwC,MAAA,QAAQ,EAAC,QAAjD;AAA0D,MAAA,MAAM,EAAE;AAChEC,QAAAA,KAAK,EAAE,KAAKxB;AADoD,OAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAKD;;AAlC0C;;AAqC7C,eAAeF,cAAf","sourcesContent":["import React from 'react';\r\nimport Omnitone from 'omnitone';\r\nimport 'aframe';\r\nimport {Entity, Scene} from 'aframe-react';\r\n\r\nclass OmnitonePlayer extends React.Component {\r\n\r\n  handleClick () {\r\n    console.log('clicked!');\r\n\r\n           // Set up an audio element to feed the ambisonic source audio feed.\r\n      const audioElement = document.createElement('audio');\r\n      audioElement.src = '../../assets/post_arthur.wav';\r\n\r\n      // Create AudioContext, MediaElementSourceNode and FOARenderer.\r\n      const audioContext = new AudioContext();\r\n      const audioElementSource = audioContext.createMediaElementSource(audioElement);\r\n      const hoaRenderer = Omnitone.createHOARenderer(audioContext);\r\n\r\n      // Make connection and start play. Hook up the user input for the playback.\r\n      hoaRenderer.initialize().then(function() {\r\n        audioElementSource.connect(hoaRenderer.input);\r\n        hoaRenderer.output.connect(audioContext.destination);\r\n\r\n        // This is necessary to activate audio playback out of autoplay block.\r\n        someButton.onclick = () => {\r\n          audioContext.resume();\r\n          audioElement.play();\r\n        };\r\n      });\r\n\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Entity primitive='a-box' color=\"green\" position=\"0 3 -5\" events={{\r\n        click: this.handleClick\r\n      }}/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default OmnitonePlayer;\r\n"]},"metadata":{},"sourceType":"module"}